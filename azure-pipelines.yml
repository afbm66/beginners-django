# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
#Configuración SonarCloud
  SONAR_ORGANIZATION: 'afbm66'
  SONAR_TOKEN: '0852d151c359efa980ca3a01287a76360c00b418'

#Configuración recursos en Azure

  azureSubscription: 'AzureResourcesForISW2'# You need to create a service connection in the project to your subscription and use it here
  appName: 'relealb' # You include here just the name of the Web application
  resourceGroupName: 'relealb'  # You include here the resource group associated to the Web application
  postgresServer: 'relealb-db.postgres.database.azure.com' # You include here the FQDN of the database
  databaseName: 'relealb-db' # You include just the name of the database
  envName: 'dev'
  pythonVersion: '3.11'
  azureWebApp: 'relealb.azurewebsites.net'
  scriptPath: '$(Build.SourcesDirectory)/scripts'

strategy:
  matrix:
    Python311:
      PYTHON_VERSION: '3.11'

steps:
- checkout: self
  fetchDepth: 0
  
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'Django-Beginners'
    organization: '$(SONAR_ORGANIZATION)'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'afbm66_Django-Beginners'
    cliProjectName: 'Django-Beginners'
    cliSources: 'demo-code'
    # extraProperties: ' -X'
    extraProperties: |
      sonar.branch.name=main
      sonar.sources=./demo-code/
      sonar.inclusions=**/*.py,**/*.html,**/*.css
      sonar.exclusions=**/static/**,**/media/**
      sonar.projectKey=afbm66_Django-Beginners
      sonar.organization=afbm66
  
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    pushd '$(projectRoot)'
    echo "Current directory: $(pwd)"
    ls  # List files in the current directory
  displayName: 'Change to the working directory'
- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r ./demo-code/requirements.txt
    # pip install -r requirements.txt
    pip install unittest-xml-reporting
    pip list
  displayName: 'Install prerequisites'

# Solución sugerida por Chat GPT para eliminar el error "Missing staticfiles..."
- script: |
    pushd '$(projectRoot)'
    python manage.py collectstatic --noinput
  displayName: 'Collect static files'

- script: |
    pushd '$(projectRoot)'
    # python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
    python manage.py test #  relecloud --no-input
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'
  condition: succeededOrFailed()
- task: SonarCloudAnalyze@1
  inputs:
    SonarCloud: 'Django-Beginners'
    cliProjectKey: 'afbm66_Django-Beginners'
    extraProperties: |
      sonar.branch.name=main
      sonar.sources=./demo-code
      sonar.inclusions=**/*.py,**/*.html,**/*.css
      sonar.exclusions=**/static/**,**/media/**
      sonar.projectKey=afbm66_Django-Beginners
      sonar.organization=afbm66
  env:
    SONAR_ORGANIZATION: 'afbm66'
    SONAR_TOKEN: '1cb6374efad257d6c1853c1ecf081e863ec092f3'

- task: SonarCloudPublish@1
  inputs: 
    pollingTimeoutSec: '300'
  env:
    SONAR_ORGANIZATION: 'afbm66'
    SONAR_TOKEN: '1cb6374efad257d6c1853c1ecf081e863ec092f3'
